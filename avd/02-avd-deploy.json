{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "14248477484839854401"
    }
  },
  "parameters": {
    "avdResourceGroup": {
      "type": "string",
      "defaultValue": "rg-prod-eus-avdresources",
      "metadata": {
        "description": "Name of resource group to hold HostPools, Application Groups, and Workspaces"
      }
    },
    "vmResourceGroup": {
      "type": "string",
      "defaultValue": "rg-prod-eus-",
      "metadata": {
        "description": "Name of resource group to hold Virtual Machines"
      }
    },
    "templateResourceGroup": {
      "type": "string",
      "defaultValue": "rg-prod-eus-avdtemplates",
      "metadata": {
        "description": "Name of resource group to create Template Spec"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "kv-prod-eus-avd",
      "maxLength": 18,
      "metadata": {
        "description": "Name of Key Vault used for AVD deployment secrets"
      }
    },
    "objectId": {
      "type": "string",
      "defaultValue": "9f27f40c-ae7b-4400-9c90-1b229a456e8b",
      "metadata": {
        "description": "AAD object ID of security principal to grant Key Vault access"
      }
    },
    "workspaceName": {
      "type": "string"
    },
    "hostPoolName": {
      "type": "string"
    },
    "hostPoolType": {
      "type": "string",
      "defaultValue": "Pooled",
      "allowedValues": [
        "Personal",
        "Pooled"
      ]
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "OU=EastUS,OU=AVD,DC=erickmoore,DC=com"
    },
    "imageId": {
      "type": "string",
      "defaultValue": "/subscriptions/224e7e93-1617-4d5a-95d2-de299b8b8175/resourceGroups/rg-prod-eus-avdresources/providers/Microsoft.Compute/galleries/acg_prod_eus_avd/images/Windows10_20H2"
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "sub-prod-eus-avd"
    },
    "vnetId": {
      "type": "string",
      "defaultValue": "/subscriptions/224e7e93-1617-4d5a-95d2-de299b8b8175/resourceGroups/rg-prod-eus-avdnetwork/providers/Microsoft.Network/virtualNetworks/vnet-prod-eus-avdnetwork"
    },
    "domainToJoin": {
      "type": "string",
      "defaultValue": "erickmoore.com"
    },
    "vmName": {
      "type": "string",
      "defaultValue": "testpoc",
      "maxLength": 10
    },
    "vmCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 200
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v4"
    },
    "domainJoinAccount": {
      "type": "string",
      "defaultValue": "dj@erickmoore.com",
      "metadata": {
        "description": "UPN for domain joining AVD systems"
      }
    },
    "domainJoinPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for domain join account"
      }
    },
    "localAdminAccount": {
      "type": "string",
      "defaultValue": "avdadmin",
      "metadata": {
        "description": "Local administrator username for AVD systems"
      }
    },
    "localAdminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for domain join account"
      }
    },
    "time": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "variables": {
    "sessionHostRg": "[format('{0}{1}', parameters('vmResourceGroup'), parameters('vmName'))]",
    "domainJoinSecret": "avdDomainJoinPassword",
    "localAdminSecret": "avdLocalAdminPassword"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('sessionHostRg')]",
      "location": "[deployment().location]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('avdkv-{0}', parameters('time'))]",
      "resourceGroup": "[parameters('avdResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "objectId": {
            "value": "[parameters('objectId')]"
          },
          "enabledForDiskEncryption": {
            "value": true
          },
          "enabledForTemplateDeployment": {
            "value": true
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1507245306556498420"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "maxLength": 18,
              "metadata": {
                "description": "Specifies the name of the key vault."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the Azure location where the key vault should be created."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
              }
            },
            "objectId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "roleName": {
              "type": "string",
              "defaultValue": "Key Vault Administrator",
              "allowedValues": [
                "Key Vault Administrator",
                "Key Vault Certificates Officer",
                "Key Vault Crypto Officer",
                "Key Vault Crypto Service Encryption User",
                "Key Vault Crypto User",
                "Key Vault Reader",
                "Key Vault Secrets Officer",
                "Key Vault Secrets User"
              ],
              "metadata": {
                "description": "Specifies the role the user will get with the secret in the vault. Valid values are: Key Vault Administrator, Key Vault Certificates Officer, Key Vault Crypto Officer, Key Vault Crypto Service Encryption User, Key Vault Crypto User, Key Vault Reader, Key Vault Secrets Officer, Key Vault Secrets User."
              }
            },
            "principalType": {
              "type": "string",
              "metadata": {
                "description": "Type of security principal for access to Key Vault"
              },
              "allowedValues": [
                "Group",
                "ServicePrincipal",
                "User"
              ]
            }
          },
          "variables": {
            "roleIdMapping": {
              "Key Vault Administrator": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
              "Key Vault Certificates Officer": "a4417e6f-fecd-4de8-b567-7b0420556985",
              "Key Vault Crypto Officer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
              "Key Vault Crypto Service Encryption User": "e147488a-f6f5-4113-8e2d-b22465e65bf6",
              "Key Vault Crypto User": "12338af0-0e69-4776-bea7-57ae8d297424",
              "Key Vault Reader": "21090545-7ca7-4776-b22c-e363652d74d2",
              "Key Vault Secrets Officer": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
              "Key Vault Secrets User": "4633458b-17de-408a-b874-0445c86b69e6"
            },
            "kvUniqueLength": "[sub(24, length(parameters('keyVaultName')))]",
            "kvUniqueName": "[format('{0}{1}', parameters('keyVaultName'), take(uniqueString(parameters('keyVaultName')), variables('kvUniqueLength')))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[variables('kvUniqueName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enableRbacAuthorization": true,
                "tenantId": "[parameters('tenantId')]",
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Deny",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('kvUniqueName'))]",
              "name": "[guid(variables('roleIdMapping')[parameters('roleName')], parameters('objectId'), resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')[parameters('roleName')])]",
                "principalId": "[parameters('objectId')]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', variables('kvUniqueName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[variables('kvUniqueName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('domainSecret-{0}', parameters('time'))]",
      "resourceGroup": "[parameters('avdResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('avdkv-{0}', parameters('time'))), '2020-10-01').outputs.keyVaultName.value]"
          },
          "secretName": {
            "value": "[variables('domainJoinSecret')]"
          },
          "secretValue": {
            "value": "[parameters('domainJoinPassword')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "17657976681018592820"
            }
          },
          "parameters": {
            "secretName": {
              "type": "string",
              "metadata": {
                "description": "Name of the secret to store in Key Vault"
              }
            },
            "secretValue": {
              "type": "secureString",
              "metadata": {
                "description": "Value of the secret to store in Key Vault"
              }
            },
            "keyVaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "properties": {
                "value": "[parameters('secretValue')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('avdkv-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('localSecret-{0}', parameters('time'))]",
      "resourceGroup": "[parameters('avdResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('avdkv-{0}', parameters('time'))), '2020-10-01').outputs.keyVaultName.value]"
          },
          "secretName": {
            "value": "[variables('localAdminSecret')]"
          },
          "secretValue": {
            "value": "[parameters('localAdminPassword')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "17657976681018592820"
            }
          },
          "parameters": {
            "secretName": {
              "type": "string",
              "metadata": {
                "description": "Name of the secret to store in Key Vault"
              }
            },
            "secretValue": {
              "type": "secureString",
              "metadata": {
                "description": "Value of the secret to store in Key Vault"
              }
            },
            "keyVaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "properties": {
                "value": "[parameters('secretValue')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('avdkv-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('ws{0}-{1}', parameters('workspaceName'), parameters('time'))]",
      "resourceGroup": "[parameters('avdResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('workspaceName')]"
          },
          "appGroupResourceIds": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('app-{0}-{1}', parameters('hostPoolName'), parameters('time'))), '2020-10-01').outputs.appGroupResourceId.value]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "17872823548586454313"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the workspace to be attach to new Application Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "appGroupResourceIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Required. Resource IDs fo the existing Application groups this workspace will group together."
              }
            },
            "workspaceFriendlyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The friendly name of the Workspace to be created."
              }
            },
            "workspaceDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the Workspace to be created."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "Checkpoint",
                "Error",
                "Management",
                "Feed"
              ],
              "allowedValues": [
                "Checkpoint",
                "Error",
                "Management",
                "Feed"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DesktopVirtualization/workspaces",
              "apiVersion": "2021-07-12",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "applicationGroupReferences": "[parameters('appGroupResourceIds')]",
                "description": "[parameters('workspaceDescription')]",
                "friendlyName": "[parameters('workspaceFriendlyName')]"
              }
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticsetting', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "workspaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]"
            },
            "workspaceResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]"
            },
            "workspaceName": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('app-{0}-{1}', parameters('hostPoolName'), parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('hp{0}-{1}', parameters('hostPoolName'), parameters('time'))]",
      "resourceGroup": "[parameters('avdResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('hostPoolName')]"
          },
          "hostpoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "startVMOnConnect": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "15896872646396638860"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Required. Name of the Host Pool"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "hostpoolFriendlyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The friendly name of the Host Pool to be created."
              }
            },
            "hostpoolDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the Host Pool to be created."
              }
            },
            "hostpoolType": {
              "type": "string",
              "defaultValue": "Pooled",
              "allowedValues": [
                "Personal",
                "Pooled"
              ],
              "metadata": {
                "description": "Optional. Set this parameter to Personal if you would like to enable Persistent Desktop experience. Defaults to Pooled."
              }
            },
            "personalDesktopAssignmentType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "Automatic",
                "Direct",
                ""
              ],
              "metadata": {
                "description": "Optional. Set the type of assignment for a Personal Host Pool type"
              }
            },
            "loadBalancerType": {
              "type": "string",
              "defaultValue": "BreadthFirst",
              "allowedValues": [
                "BreadthFirst",
                "DepthFirst",
                "Persistent"
              ],
              "metadata": {
                "description": "Optional. Type of load balancer algorithm."
              }
            },
            "maxSessionLimit": {
              "type": "int",
              "defaultValue": 99999,
              "metadata": {
                "description": "Optional. Maximum number of sessions."
              }
            },
            "customRdpProperty": {
              "type": "string",
              "defaultValue": "audiocapturemode:i:1;audiomode:i:0;drivestoredirect:s:;redirectclipboard:i:1;redirectcomports:i:1;redirectprinters:i:1;redirectsmartcards:i:1;screen mode id:i:2;",
              "metadata": {
                "description": "Optional. Host Pool RDP properties"
              }
            },
            "validationEnviroment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether to use validation enviroment. When set to true, the Host Pool will be deployed in a validation 'ring' (environment) that receives all the new features (might be less stable). Ddefaults to false that stands for the stable, production-ready environment."
              }
            },
            "vmTemplate": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The necessary information for adding more VMs to this Host Pool."
              }
            },
            "tokenValidityLength": {
              "type": "string",
              "defaultValue": "PT8H",
              "metadata": {
                "description": "Optional. Host Pool token validity length. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the token will be valid for 8 hours."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "preferredAppGroupType": {
              "type": "string",
              "defaultValue": "Desktop",
              "allowedValues": [
                "Desktop",
                "None",
                "RailApplications"
              ],
              "metadata": {
                "description": "Optional. The type of preferred application group type, default to Desktop Application Group"
              }
            },
            "startVMOnConnect": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable Start VM on connect to allow users to start the virtual machine from a deallocated state. Important: Custom RBAC role required to power manage VMs."
              }
            },
            "validationEnvironment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Validation host pool allows you to test service changes before they are deployed to production."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "Checkpoint",
                "Error",
                "Management",
                "Connection",
                "HostRegistration",
                "AgentHealthStatus"
              ],
              "allowedValues": [
                "Checkpoint",
                "Error",
                "Management",
                "Connection",
                "HostRegistration",
                "AgentHealthStatus"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "tokenExpirationTime": "[dateTimeAdd(parameters('baseTime'), parameters('tokenValidityLength'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DesktopVirtualization/hostPools",
              "apiVersion": "2021-07-12",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "friendlyName": "[parameters('hostpoolFriendlyName')]",
                "description": "[parameters('hostpoolDescription')]",
                "hostPoolType": "[parameters('hostpoolType')]",
                "customRdpProperty": "[parameters('customRdpProperty')]",
                "personalDesktopAssignmentType": "[parameters('personalDesktopAssignmentType')]",
                "preferredAppGroupType": "[parameters('preferredAppGroupType')]",
                "maxSessionLimit": "[parameters('maxSessionLimit')]",
                "loadBalancerType": "[parameters('loadBalancerType')]",
                "validationEnviroment": "[parameters('validationEnviroment')]",
                "startVMOnConnect": "[parameters('startVMOnConnect')]",
                "validationEnvironment": "[parameters('validationEnvironment')]",
                "registrationInfo": {
                  "expirationTime": "[variables('tokenExpirationTime')]",
                  "token": null,
                  "registrationTokenOperation": "Update"
                },
                "vmTemplate": "[if(not(empty(parameters('vmTemplate'))), null(), string(parameters('vmTemplate')))]"
              }
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticsetting', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "hostPoolResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the AVD host pool"
              }
            },
            "hostPoolResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the AVD host pool was deployed into"
              }
            },
            "hostPoolName": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the AVD host pool"
              }
            },
            "tokenExpirationTime": {
              "type": "string",
              "value": "[dateTimeAdd(parameters('baseTime'), parameters('tokenValidityLength'))]",
              "metadata": {
                "description": "The expiration time for the registration token"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('app-{0}-{1}', parameters('hostPoolName'), parameters('time'))]",
      "resourceGroup": "[parameters('avdResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appGroupType": {
            "value": "Desktop"
          },
          "hostpoolName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('hp{0}-{1}', parameters('hostPoolName'), parameters('time'))), '2020-10-01').outputs.hostPoolName.value]"
          },
          "name": {
            "value": "[format('app-{0}', parameters('hostPoolName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8141398975087875123"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Required. Name of the Application Group to create this application in."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "appGroupType": {
              "type": "string",
              "allowedValues": [
                "RemoteApp",
                "Desktop"
              ],
              "metadata": {
                "description": "Required. The type of the Application Group to be created. Allowed values: RemoteApp or Desktop"
              }
            },
            "hostpoolName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Host Pool to be linked to this Application Group."
              }
            },
            "appGroupFriendlyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The friendly name of the Application Group to be created."
              }
            },
            "appGroupDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the Application Group to be created."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "Checkpoint",
                "Error",
                "Management"
              ],
              "allowedValues": [
                "Checkpoint",
                "Error",
                "Management"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DesktopVirtualization/applicationGroups",
              "apiVersion": "2021-07-12",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "hostPoolArmPath": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostpoolName'))]",
                "friendlyName": "[parameters('appGroupFriendlyName')]",
                "description": "[parameters('appGroupDescription')]",
                "applicationGroupType": "[parameters('appGroupType')]"
              }
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "appGroupResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
            },
            "appGroupResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]"
            },
            "appGroupName": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('hp{0}-{1}', parameters('hostPoolName'), parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('sh{0}-{1}', parameters('vmName'), parameters('time'))]",
      "resourceGroup": "[variables('sessionHostRg')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainToJoin": {
            "value": "[parameters('domainToJoin')]"
          },
          "domainUserName": {
            "value": "[parameters('domainJoinAccount')]"
          },
          "hostPoolId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('hp{0}-{1}', parameters('hostPoolName'), parameters('time'))), '2020-10-01').outputs.hostPoolResourceId.value]"
          },
          "imageId": {
            "value": "[parameters('imageId')]"
          },
          "localAdminName": {
            "value": "[parameters('localAdminAccount')]"
          },
          "localAdminPassword": {
            "value": "[parameters('localAdminPassword')]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "vmName": {
            "value": "[parameters('vmName')]"
          },
          "vnetId": {
            "value": "[parameters('vnetId')]"
          },
          "count": {
            "value": "[parameters('vmCount')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8847084262004801533"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "maxLength": 10
            },
            "hostPoolId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "aadJoin": {
              "type": "bool",
              "defaultValue": false
            },
            "count": {
              "type": "int",
              "defaultValue": 1
            },
            "vnetId": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "imageId": {
              "type": "string"
            },
            "localAdminName": {
              "type": "string"
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v4"
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "Windows_Client"
            },
            "domainToJoin": {
              "type": "string"
            },
            "domainUserName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "installNVidiaGPUDriver": {
              "type": "bool",
              "defaultValue": false
            },
            "localAdminPassword": {
              "type": "secureString"
            },
            "domainJoinPassword": {
              "type": "secureString"
            }
          },
          "variables": {
            "hostPoolRg": "[split(parameters('hostPoolId'), '/')[4]]",
            "hostPoolName": "[split(parameters('hostPoolId'), '/')[8]]"
          },
          "resources": [
            {
              "copy": {
                "name": "networkInterface",
                "count": "[length(range(0, parameters('count')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-05-01",
              "name": "[format('nic-{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[copyIndex()], 1))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "sessionHost",
                "count": "[length(range(0, parameters('count')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[copyIndex()], 1))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "osProfile": {
                  "computerName": "[format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[copyIndex()], 1))]",
                  "adminUsername": "[parameters('localAdminName')]",
                  "adminPassword": "[parameters('localAdminPassword')]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "id": "[parameters('imageId')]"
                  }
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true
                  }
                },
                "licenseType": "[parameters('licenseType')]",
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "properties": {
                        "primary": true
                      },
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]",
                "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]"
              ]
            },
            {
              "condition": "[not(parameters('aadJoin'))]",
              "copy": {
                "name": "sessionHostDomainJoin",
                "count": "[length(range(0, parameters('count')))]"
              },
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/JoinDomain', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[parameters('domainToJoin')]",
                  "ouPath": "[parameters('ouPath')]",
                  "user": "[parameters('domainUserName')]",
                  "restart": true,
                  "options": 3
                },
                "protectedSettings": {
                  "password": "[parameters('domainJoinPassword')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]",
                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]"
              ]
            },
            {
              "condition": "[parameters('aadJoin')]",
              "copy": {
                "name": "sessionHostAADLogin",
                "count": "[length(range(0, parameters('count')))]"
              },
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/AADLoginForWindows', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]"
              ]
            },
            {
              "copy": {
                "name": "sessionHostAVDAgent",
                "count": "[length(range(0, parameters('count')))]"
              },
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/AddSessionHost', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.73",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "modulesUrl": "https://wvdportalstorageblob.blob.core.windows.net/galleryartifacts/Configuration_8-16-2021.zip",
                  "configurationFunction": "Configuration.ps1\\AddSessionHost",
                  "properties": {
                    "hostPoolName": "[variables('hostPoolName')]",
                    "registrationInfoToken": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hostPoolRg')), 'Microsoft.DesktopVirtualization/hostPools', variables('hostPoolName')), '2021-07-12').registrationInfo.token]",
                    "aadJoin": "[parameters('aadJoin')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', split(format('{0}/JoinDomain', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]]], 1))), '/')[0], split(format('{0}/JoinDomain', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]]], 1))), '/')[1])]"
              ]
            },
            {
              "condition": "[parameters('installNVidiaGPUDriver')]",
              "copy": {
                "name": "sessionHostGPUDriver",
                "count": "[length(range(0, parameters('count')))]"
              },
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/InstallNvidiaGpuDriverWindows', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "NvidiaGpuDriverWindows",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-{1}', parameters('vmName'), add(range(0, parameters('count'))[range(0, parameters('count'))[copyIndex()]], 1)))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('hp{0}-{1}', parameters('hostPoolName'), parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('avdkv-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('sessionHostRg'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('sessionHts-{0}', parameters('time'))]",
      "resourceGroup": "[parameters('templateResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('avdkv-{0}', parameters('time'))), '2020-10-01').outputs.keyVaultName.value]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('avdResourceGroup')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "count": {
            "value": "[parameters('vmCount')]"
          },
          "imageId": {
            "value": "[parameters('imageId')]"
          },
          "hostPoolId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('hp{0}-{1}', parameters('hostPoolName'), parameters('time'))), '2020-10-01').outputs.hostPoolResourceId.value]"
          },
          "domainJoinUserName": {
            "value": "[parameters('domainJoinAccount')]"
          },
          "templateSpecDisplayName": {
            "value": "[format('{0}-SessionHost', parameters('hostPoolName'))]"
          },
          "domainToJoin": {
            "value": "[parameters('domainToJoin')]"
          },
          "vmName": {
            "value": "[parameters('vmName')]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "localAdminName": {
            "value": "[parameters('localAdminAccount')]"
          },
          "templateSpecName": {
            "value": "[format('{0}-SessionHost', parameters('hostPoolName'))]"
          },
          "vnetId": {
            "value": "[parameters('vnetId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "406442249400708924"
            }
          },
          "parameters": {
            "templateSpecName": {
              "type": "string"
            },
            "templateSpecDisplayName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "templateSpecVersion": {
              "type": "string",
              "defaultValue": "1.0"
            },
            "domainJoinUserName": {
              "type": "string"
            },
            "domainToJoin": {
              "type": "string"
            },
            "hostPoolId": {
              "type": "string"
            },
            "imageId": {
              "type": "string"
            },
            "localAdminName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "vmName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "count": {
              "type": "int"
            },
            "vmSize": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultResourceGroup": {
              "type": "string"
            }
          },
          "variables": {
            "hostPoolRg": "[split(parameters('hostPoolId'), '/')[4]]",
            "hostPoolName": "[split(parameters('hostPoolId'), '/')[8]]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/templateSpecs",
              "apiVersion": "2021-05-01",
              "name": "[parameters('templateSpecName')]",
              "location": "[parameters('location')]",
              "properties": {
                "displayName": "[parameters('templateSpecDisplayName')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Resources/templateSpecs/versions",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', parameters('templateSpecName'), parameters('templateSpecVersion'))]",
              "location": "[parameters('location')]",
              "properties": {
                "mainTemplate": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "count": {
                      "type": "int"
                    }
                  },
                  "variables": {
                    "domainJoinUserSecret": "domainjoinpassword",
                    "localAdminUserSecret": "avdlocaladminpassword"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "test",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "domainJoinPassword": {
                            "reference": {
                              "keyVault": {
                                "id": "[format('[extensionResourceId(format(''/subscriptions/{{0}}/resourceGroups/{{1}}'', subscription().subscriptionId, {0}, ''Microsoft.KeyVault/vaults'', {1})]', parameters('keyVaultResourceGroup'), parameters('keyVaultName'))]"
                              },
                              "secretName": "[[variables('domainJoinUserSecret')]"
                            }
                          },
                          "domainToJoin": {
                            "value": "[parameters('domainToJoin')]"
                          },
                          "domainUserName": {
                            "value": "[parameters('domainJoinUserName')]"
                          },
                          "hostPoolId": {
                            "value": "[parameters('hostPoolId')]"
                          },
                          "imageId": {
                            "value": "[parameters('imageId')]"
                          },
                          "localAdminName": {
                            "value": "[parameters('localAdminName')]"
                          },
                          "localAdminPassword": {
                            "reference": {
                              "keyVault": {
                                "id": "[format('[extensionResourceId(format(''/subscriptions/{{0}}/resourceGroups/{{1}}'', subscription().subscriptionId, {0}, ''Microsoft.KeyVault/vaults'', {1})]', parameters('keyVaultResourceGroup'), parameters('keyVaultName'))]"
                              },
                              "secretName": "[[variables('localAdminUserSecret')]"
                            }
                          },
                          "ouPath": {
                            "value": "[parameters('ouPath')]"
                          },
                          "vmName": {
                            "value": "[parameters('vmName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "vmName": {
                              "type": "string",
                              "maxLength": 10
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[[resourceGroup().location]"
                            },
                            "aadJoin": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "count": {
                              "type": "int",
                              "defaultValue": 1
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "licenseType": {
                              "type": "string",
                              "defaultValue": "Windows_Client"
                            },
                            "installNVidiaGPUDriver": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "localAdminPassword": {
                              "type": "secureString"
                            },
                            "domainJoinPassword": {
                              "type": "secureString"
                            }
                          },
                          "variables": {
                            "hostPoolRg": "[format('{0}', split(parameters('hostPoolId'), '/')[4])]",
                            "hostPoolName": "[format('{0}', split(parameters('hostPoolId'), '/')[8])]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "networkInterface",
                                "count": "[[length(range(0 parameters('count')))]"
                              },
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2019-07-01",
                              "name": "[[format('nic-{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[copyIndex()] 1))]",
                              "location": "[[parameters('location')]",
                              "tags": "[[parameters('tags')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "subnet": {
                                        "id": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]"
                                      },
                                      "privateIPAllocationMethod": "Dynamic"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "copy": {
                                "name": "sessionHost",
                                "count": "[[length(range(0 parameters('count')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2019-07-01",
                              "name": "[[format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[copyIndex()] 1))]",
                              "location": "[[parameters('location')]",
                              "tags": "[[parameters('tags')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "osProfile": {
                                  "computerName": "[[format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[copyIndex()] 1))]",
                                  "adminUsername": "[parameters('localAdminName')]",
                                  "adminPassword": "[[parameters('localAdminPassword')]"
                                },
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "id": "[parameters('imageId')]"
                                  }
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": true
                                  }
                                },
                                "licenseType": "[[parameters('licenseType')]",
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "properties": {
                                        "primary": true
                                      },
                                      "id": "[[resourceId('Microsoft.Network/networkInterfaces' format('nic-{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]"
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[[resourceId('Microsoft.Network/networkInterfaces' format('nic-{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]",
                                "[[resourceId('Microsoft.Network/networkInterfaces' format('nic-{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]"
                              ]
                            },
                            {
                              "condition": "[[not(parameters('aadJoin'))]",
                              "copy": {
                                "name": "sessionHostDomainJoin",
                                "count": "[[length(range(0 parameters('count')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2020-06-01",
                              "name": "[[format('{0}/JoinDomain' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]",
                              "location": "[[parameters('location')]",
                              "tags": "[[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "JsonADDomainExtension",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "name": "[parameters('domainToJoin')]",
                                  "ouPath": "[parameters('ouPath')]",
                                  "user": "[parameters('domainJoinUserName')]",
                                  "restart": true,
                                  "options": 3
                                },
                                "protectedSettings": {
                                  "password": "[[parameters('domainJoinPassword')]"
                                }
                              },
                              "dependsOn": [
                                "[[resourceId('Microsoft.Compute/virtualMachines' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]",
                                "[[resourceId('Microsoft.Compute/virtualMachines' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]"
                              ]
                            },
                            {
                              "condition": "[[parameters('aadJoin')]",
                              "copy": {
                                "name": "sessionHostAADLogin",
                                "count": "[[length(range(0 parameters('count')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2020-06-01",
                              "name": "[[format('{0}/AADLoginForWindows' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]",
                              "location": "[[parameters('location')]",
                              "tags": "[[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.ActiveDirectory",
                                "type": "AADLoginForWindows",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true
                              },
                              "dependsOn": [
                                "[[resourceId('Microsoft.Compute/virtualMachines' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "sessionHostAVDAgent",
                                "count": "[[length(range(0 parameters('count')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2020-06-01",
                              "name": "[[format('{0}/AddSessionHost' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]",
                              "location": "[[parameters('location')]",
                              "tags": "[[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.73",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "modulesUrl": "https://wvdportalstorageblob.blob.core.windows.net/galleryartifacts/Configuration_8-16-2021.zip",
                                  "configurationFunction": "Configuration.ps1\\AddSessionHost",
                                  "properties": {
                                    "hostPoolName": "[[variables('hostPoolName')]",
                                    "registrationInfoToken": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}' subscription().subscriptionId variables('hostPoolRg')) 'Microsoft.DesktopVirtualization/hostPools' variables('hostPoolName')) '2021-07-12').registrationInfo.token]",
                                    "aadJoin": "[[parameters('aadJoin')]"
                                  }
                                }
                              },
                              "dependsOn": [
                                "[[resourceId('Microsoft.Compute/virtualMachines' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]",
                                "[[resourceId('Microsoft.Compute/virtualMachines/extensions' split(format('{0}/JoinDomain' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]]] 1))) '/')[0] split(format('{0}/JoinDomain' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]]] 1))) '/')[1])]"
                              ]
                            },
                            {
                              "condition": "[[parameters('installNVidiaGPUDriver')]",
                              "copy": {
                                "name": "sessionHostGPUDriver",
                                "count": "[[length(range(0 parameters('count')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2020-06-01",
                              "name": "[[format('{0}/InstallNvidiaGpuDriverWindows' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]",
                              "location": "[[parameters('location')]",
                              "tags": "[[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.HpcCompute",
                                "type": "NvidiaGpuDriverWindows",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "settings": {}
                              },
                              "dependsOn": [
                                "[[resourceId('Microsoft.Compute/virtualMachines' format('{0}-{1}' parameters('vmName') add(range(0 parameters('count'))[range(0 parameters('count'))[copyIndex()]] 1)))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/templateSpecs', parameters('templateSpecName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('hp{0}-{1}', parameters('hostPoolName'), parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('avdResourceGroup')), 'Microsoft.Resources/deployments', format('avdkv-{0}', parameters('time')))]"
      ]
    }
  ]
}